{"version":3,"sources":["components/LazyLoadingComponent/LazyLoadingComponent.jsx","components/App/App.jsx","components/LazyLoadingComponent/FadeInComponent.jsx","components/LazyLoadingComponent/GenerateLazyLoadingComponents.jsx","components lazy /^/.//.*$/ groupOptions: {} namespace object","serviceWorker.js","index.js"],"names":["LazyLoadingComponent","memo","dataIndexElement","pathComponent","fadeInEffect","useState","componentToLoad","setComponentToLoad","options","threshold","initComponent","_","target","targetElement","document","querySelector","IntersectionObserver","entries","observer","forEach","entry","isIntersecting","then","res","a","ComponentLazyLoaded","default","disconnect","observe","useEffect","data-index","className","componentsInfo","App","FadeInComponent","children","GenerateLazyLoadingComponents","components","setComponents","map","item","index","key","length","webpackAsyncContext","req","__webpack_require__","o","Promise","resolve","e","Error","code","ids","id","all","slice","t","keys","Object","module","exports","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.9f15db9f.chunk.js","sourcesContent":["import React, { useEffect, useState, memo } from \"react\";\n// import FadeInComponent to apply to the component that we wanna lazy load a fadeIn effect (optional)\nimport FadeInComponent from \"./FadeInComponent\";\nimport \"./LazyLoadingComponent.css\";\n\n/**\n *\n *  @param dataIndexElement ==> 'data-index' attribute to identify the intersection with the user's view from IntersectionObserver\n *  @param pathComponent ==> relative path of the component to load\n *  @param fadeInEffect ==> fadeIn class listed in animate.css file (https://daneden.github.io/animate.css/) or (https://github.com/daneden/animate.css)\n *  @param debugMode ==> if its value is true, then it will show some console.log message to help the developer understand what's happening. Otherwise it won't show anything.\n *\n *  LazyLoadingComponent goal's is to allow the user to lazy loading the component\n *  which relative path is passed by argument with an optional fadeIn effect from animate.css\n */\nconst LazyLoadingComponent = memo(\n  ({\n    dataIndexElement = 0,\n    pathComponent = \"\",\n    fadeInEffect = \"undefined\"\n  }) => {\n    // ComponentToLoad (is the state of the component)\n    // ComponentToLoad final's value will be the component to load inside the FadeInComponent\n    // Example: ComponentToLoad ==> <FadeInComponent><MYCOMPONENTLAZYLOADED/></FadeInComponent>\n    const [componentToLoad, setComponentToLoad] = useState(null);\n\n    // options argument for IntersectionObserver\n    const options = {\n      threshold: 0.3\n    };\n\n    // lazyLoading function will check if the element with the id (idElementActivation) has already intersected the screen\n    // and if yes, then the component with path (pathComponent) will be dinamically loaded and returned inside the FadeInComponent\n    // which will apply the animation if it was passed by argument (fadeInEffect)\n    const lazyLoading = target => {\n      const io = new IntersectionObserver((entries, observer) => {\n        // for each entry the code verifies with isIntersecting if the user's view\n        // is already been intersecting with the component having id (idElementActivation)\n        entries.forEach(entry => {\n          // if the component with id = idElementActivation intersect the user's view,\n          // isIntersecting's value will be true\n          if (entry.isIntersecting) {\n            // using a dynamic import to 'lazy load' the component\n            import(`../${pathComponent}`).then(async res => {\n              const ComponentLazyLoaded = res.default;\n              setComponentToLoad(\n                <FadeInComponent fadeInEffect={fadeInEffect}>\n                  <ComponentLazyLoaded />\n                </FadeInComponent>\n              );\n            });\n            // disable the observer (further checks aren't necessary)\n            observer.disconnect();\n          }\n        });\n      }, options);\n      // starting with observe the element with id = idElementActivation\n      io.observe(target);\n    };\n\n    const initComponent = _ => {\n      // identify the HTML element with id = idElementActivation\n      let targetElement = document.querySelector(\n        `div[data-index=\"${dataIndexElement}\"]`\n      );\n      lazyLoading(targetElement);\n    };\n\n    useEffect(_ => {\n      // activate the IntersectionObserver\n      initComponent();\n    }, []);\n\n    return (\n      // 'lazy-load-component' class has (padding: 50px 0;). DO NOT REMOVE IT :)\n      <div\n        data-index={dataIndexElement}\n        className=\"lazy-load-component lazy-load-component--not-loaded\"\n      >\n        {componentToLoad}\n      </div>\n    );\n  }\n);\n\nexport default LazyLoadingComponent;\n","import React from \"react\";\nimport LazyLoadingComponent from \"../LazyLoadingComponent/LazyLoadingComponent\";\nimport GenerateLazyLoadingComponents from \"../LazyLoadingComponent/GenerateLazyLoadingComponents\";\nimport \"./App.css\";\n\nconst componentsInfo = [\n  {\n    pathComponent: \"TestComponents/Component1/Component1\",\n    fadeInEffect: \"fadeInLeft\"\n  },\n  {\n    pathComponent: \"TestComponents/Component2/Component2\",\n    fadeInEffect: \"fadeInRight\"\n  },\n  {\n    pathComponent: \"TestComponents/Component3/Component3\",\n    fadeInEffect: \"fadeInLeft\"\n  },\n  {\n    pathComponent: \"TestComponents/Component4/Component4\",\n    fadeInEffect: \"fadeInRight\"\n  },\n  {\n    pathComponent: \"TestComponents/Component5/Component5\",\n    fadeInEffect: \"fadeInLeft\"\n  },\n  {\n    pathComponent: \"TestComponents/Component6/Component6\",\n    fadeInEffect: \"fadeInRight\"\n  }\n];\n\nconst App = _ => {\n  return (\n    <div className=\"App\">\n      <GenerateLazyLoadingComponents {...{ componentsInfo }} />\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react'\n\n// FadeInComponent return its children inside a div which shows an animation from animate.css passed as props.\n// If fadeInEffect has value of undefined, only the children will be returned\nconst FadeInComponent = ({ fadeInEffect = \"undefined\", children }) => {\n    const returnHTMLCode = _ => (\n        // if no fadeInEffect was passed as argument, then only the children will be returned,\n        // otherwise a div (containing the children) with a fadeInEffect class will be returned\n        (fadeInEffect !== \"undefined\" && fadeInEffect !== null && fadeInEffect !== '') ? (\n            // 'animated' class is necessary for using animate.css class effects\n            <div className={`animated ${fadeInEffect}`}>\n                { children }\n            </div>\n        ) : (\n            <>\n                { children }\n            </>\n        )\n    )\n\n    return( returnHTMLCode() )\n}\n\nexport default FadeInComponent","import React, { useState, useEffect, memo } from \"react\";\nimport LazyLoadingComponent from \"./LazyLoadingComponent\";\n\nconst GenerateLazyLoadingComponents = memo(({ componentsInfo }) => {\n  const [components, setComponents] = useState([]);\n\n  const init = () =>\n    componentsInfo.map((item, index) => (\n      <LazyLoadingComponent\n        dataIndexElement={index}\n        pathComponent={item.pathComponent}\n        fadeInEffect={item.fadeInEffect}\n        key={index}\n      />\n    ));\n\n  useEffect(() => {\n    setComponents(init());\n  }, componentsInfo);\n\n  return <>{components.length === componentsInfo.length ? components : null}</>;\n});\n\nexport default GenerateLazyLoadingComponents;\n","var map = {\n\t\"./App/App\": [\n\t\t2,\n\t\t9\n\t],\n\t\"./App/App.css\": [\n\t\t9,\n\t\t7\n\t],\n\t\"./App/App.jsx\": [\n\t\t2,\n\t\t9\n\t],\n\t\"./LazyLoadingComponent/FadeInComponent\": [\n\t\t3,\n\t\t9\n\t],\n\t\"./LazyLoadingComponent/FadeInComponent.jsx\": [\n\t\t3,\n\t\t9\n\t],\n\t\"./LazyLoadingComponent/GenerateLazyLoadingComponents\": [\n\t\t4,\n\t\t9\n\t],\n\t\"./LazyLoadingComponent/GenerateLazyLoadingComponents.jsx\": [\n\t\t4,\n\t\t9\n\t],\n\t\"./LazyLoadingComponent/LazyLoadingComponent\": [\n\t\t1,\n\t\t9\n\t],\n\t\"./LazyLoadingComponent/LazyLoadingComponent.css\": [\n\t\t8,\n\t\t7\n\t],\n\t\"./LazyLoadingComponent/LazyLoadingComponent.jsx\": [\n\t\t1,\n\t\t9\n\t],\n\t\"./TestComponents/Component1/Component1\": [\n\t\t12,\n\t\t9,\n\t\t0\n\t],\n\t\"./TestComponents/Component1/Component1.jsx\": [\n\t\t12,\n\t\t9,\n\t\t0\n\t],\n\t\"./TestComponents/Component2/Component2\": [\n\t\t13,\n\t\t9,\n\t\t1\n\t],\n\t\"./TestComponents/Component2/Component2.jsx\": [\n\t\t13,\n\t\t9,\n\t\t1\n\t],\n\t\"./TestComponents/Component3/Component3\": [\n\t\t14,\n\t\t9,\n\t\t2\n\t],\n\t\"./TestComponents/Component3/Component3.jsx\": [\n\t\t14,\n\t\t9,\n\t\t2\n\t],\n\t\"./TestComponents/Component4/Component4\": [\n\t\t15,\n\t\t9,\n\t\t3\n\t],\n\t\"./TestComponents/Component4/Component4.jsx\": [\n\t\t15,\n\t\t9,\n\t\t3\n\t],\n\t\"./TestComponents/Component5/Component5\": [\n\t\t16,\n\t\t9,\n\t\t4\n\t],\n\t\"./TestComponents/Component5/Component5.jsx\": [\n\t\t16,\n\t\t9,\n\t\t4\n\t],\n\t\"./TestComponents/Component6/Component6\": [\n\t\t17,\n\t\t9,\n\t\t5\n\t],\n\t\"./TestComponents/Component6/Component6.jsx\": [\n\t\t17,\n\t\t9,\n\t\t5\n\t]\n};\nfunction webpackAsyncContext(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\treturn Promise.resolve().then(function() {\n\t\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\t\te.code = 'MODULE_NOT_FOUND';\n\t\t\tthrow e;\n\t\t});\n\t}\n\n\tvar ids = map[req], id = ids[0];\n\treturn Promise.all(ids.slice(2).map(__webpack_require__.e)).then(function() {\n\t\treturn __webpack_require__.t(id, ids[1])\n\t});\n}\nwebpackAsyncContext.keys = function webpackAsyncContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackAsyncContext.id = 24;\nmodule.exports = webpackAsyncContext;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./components/App/App\";\nimport \"./index.css\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}